// File generated by the BNF Converter (bnfc 2.9.5).

package forth_parser;

/** Abstract Visitor */

public class AbstractVisitor<R,A> implements AllVisitor<R,A> {
    /* Prg */
    public R visit(forth_parser.Absyn.Program p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(forth_parser.Absyn.Prg p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Statement */
    public R visit(forth_parser.Absyn.Literal p, A arg) { return visitDefault(p, arg); }
    public R visit(forth_parser.Absyn.Expression p, A arg) { return visitDefault(p, arg); }
    public R visit(forth_parser.Absyn.SinlgeWord p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(forth_parser.Absyn.Statement p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Expr */
    public R visit(forth_parser.Absyn.Conditional p, A arg) { return visitDefault(p, arg); }
    public R visit(forth_parser.Absyn.Loop p, A arg) { return visitDefault(p, arg); }
    public R visit(forth_parser.Absyn.Define p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(forth_parser.Absyn.Expr p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Word */
    public R visit(forth_parser.Absyn.Name p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(forth_parser.Absyn.Word p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }
    /* Constant */
    public R visit(forth_parser.Absyn.Number p, A arg) { return visitDefault(p, arg); }
    public R visitDefault(forth_parser.Absyn.Constant p, A arg) {
      throw new IllegalArgumentException(this.getClass().getName() + ": " + p);
    }

}
