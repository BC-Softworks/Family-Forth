// File generated by the BNF Converter (bnfc 2.9.5).

package forth_parser;

/*** Visitor Design Pattern Skeleton. ***/

/* This implements the common visitor design pattern.
   Tests show it to be slightly less efficient than the
   instanceof method, but easier to use.
   Replace the R and A parameters with the desired return
   and context types.*/

public class VisitSkel
{
  public class PrgVisitor<R,A> implements forth_parser.Absyn.Prg.Visitor<R,A>
  {
    public R visit(forth_parser.Absyn.Program p, A arg)
    { /* Code for Program goes here */
      for (forth_parser.Absyn.Statement x: p.liststatement_) {
        x.accept(new StatementVisitor<R,A>(), arg);
      }
      return null;
    }
  }
  public class StatementVisitor<R,A> implements forth_parser.Absyn.Statement.Visitor<R,A>
  {
    public R visit(forth_parser.Absyn.Literal p, A arg)
    { /* Code for Literal goes here */
      p.constant_.accept(new ConstantVisitor<R,A>(), arg);
      return null;
    }
    public R visit(forth_parser.Absyn.Expression p, A arg)
    { /* Code for Expression goes here */
      p.expr_.accept(new ExprVisitor<R,A>(), arg);
      return null;
    }
    public R visit(forth_parser.Absyn.SinlgeWord p, A arg)
    { /* Code for SinlgeWord goes here */
      p.word_.accept(new WordVisitor<R,A>(), arg);
      return null;
    }
  }
  public class ExprVisitor<R,A> implements forth_parser.Absyn.Expr.Visitor<R,A>
  {
    public R visit(forth_parser.Absyn.Conditional p, A arg)
    { /* Code for Conditional goes here */
      p.statement_.accept(new StatementVisitor<R,A>(), arg);
      return null;
    }
    public R visit(forth_parser.Absyn.Loop p, A arg)
    { /* Code for Loop goes here */
      p.statement_.accept(new StatementVisitor<R,A>(), arg);
      return null;
    }
    public R visit(forth_parser.Absyn.Define p, A arg)
    { /* Code for Define goes here */
      p.word_.accept(new WordVisitor<R,A>(), arg);
      p.statement_.accept(new StatementVisitor<R,A>(), arg);
      return null;
    }
  }
  public class WordVisitor<R,A> implements forth_parser.Absyn.Word.Visitor<R,A>
  {
    public R visit(forth_parser.Absyn.Name p, A arg)
    { /* Code for Name goes here */
      //p.forthword_;
      return null;
    }
  }
  public class ConstantVisitor<R,A> implements forth_parser.Absyn.Constant.Visitor<R,A>
  {
    public R visit(forth_parser.Absyn.Number p, A arg)
    { /* Code for Number goes here */
      //p.integer_;
      return null;
    }
  }
}
