// File generated by the BNF Converter (bnfc 2.9.5).

package forth_parser;

public class PrettyPrinter
{
  //For certain applications increasing the initial size of the buffer may improve performance.
  private static final int INITIAL_BUFFER_SIZE = 128;
  private static final int INDENT_WIDTH = 2;
  //You may wish to change the parentheses used in precedence.
  private static final String _L_PAREN = new String("(");
  private static final String _R_PAREN = new String(")");
  //You may wish to change render
  private static void render(String s)
  {
    if (s.equals("{"))
    {
       onEmptyLine();
       buf_.append(s);
       _n_ = _n_ + INDENT_WIDTH;
       buf_.append("\n");
       indent();
    }
    else if (s.equals("(") || s.equals("["))
       buf_.append(s);
    else if (s.equals(")") || s.equals("]"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals("}"))
    {
       _n_ = _n_ - INDENT_WIDTH;
       onEmptyLine();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals(","))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals(";"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals("")) return;
    else if (s.trim().equals(""))
    {
       backup();
       buf_.append(s);
    }
    else
    {
       buf_.append(s);
       buf_.append(" ");
    }
  }


  //  print and show methods are defined for each category.
  public static String print(forth_parser.Absyn.Prg foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(forth_parser.Absyn.Prg foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(forth_parser.Absyn.ListStatement foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(forth_parser.Absyn.ListStatement foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(forth_parser.Absyn.Statement foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(forth_parser.Absyn.Statement foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(forth_parser.Absyn.Expr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(forth_parser.Absyn.Expr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(forth_parser.Absyn.Word foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(forth_parser.Absyn.Word foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(forth_parser.Absyn.Constant foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(forth_parser.Absyn.Constant foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(forth_parser.Absyn.ListExpr foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(forth_parser.Absyn.ListExpr foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  /***   You shouldn't need to change anything beyond this point.   ***/

  private static void pp(forth_parser.Absyn.Prg foo, int _i_)
  {
    if (foo instanceof forth_parser.Absyn.Program)
    {
       forth_parser.Absyn.Program _program = (forth_parser.Absyn.Program) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_program.liststatement_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(forth_parser.Absyn.ListStatement foo, int _i_)
  {
    ppListStatement(foo.iterator(), _i_);
  }

  private static void ppListStatement(java.util.Iterator<forth_parser.Absyn.Statement> it, int _i_)
  {
    if (it.hasNext())
    {
      forth_parser.Absyn.Statement el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); ppListStatement(it, _i_);
      }
    }
  }


  private static void pp(forth_parser.Absyn.Statement foo, int _i_)
  {
    if (foo instanceof forth_parser.Absyn.Literal)
    {
       forth_parser.Absyn.Literal _literal = (forth_parser.Absyn.Literal) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_literal.constant_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof forth_parser.Absyn.Expression)
    {
       forth_parser.Absyn.Expression _expression = (forth_parser.Absyn.Expression) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_expression.expr_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof forth_parser.Absyn.SinlgeWord)
    {
       forth_parser.Absyn.SinlgeWord _sinlgeword = (forth_parser.Absyn.SinlgeWord) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_sinlgeword.word_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(forth_parser.Absyn.Expr foo, int _i_)
  {
    if (foo instanceof forth_parser.Absyn.Conditional)
    {
       forth_parser.Absyn.Conditional _conditional = (forth_parser.Absyn.Conditional) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("if");
       pp(_conditional.statement_, 0);
       render("then");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof forth_parser.Absyn.Loop)
    {
       forth_parser.Absyn.Loop _loop = (forth_parser.Absyn.Loop) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("begin");
       pp(_loop.statement_, 0);
       render("until");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof forth_parser.Absyn.Define)
    {
       forth_parser.Absyn.Define _define = (forth_parser.Absyn.Define) foo;
       if (_i_ > 0) render(_L_PAREN);
       render(":");
       pp(_define.word_, 0);
       pp(_define.statement_, 0);
       render(";");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(forth_parser.Absyn.Word foo, int _i_)
  {
    if (foo instanceof forth_parser.Absyn.Name)
    {
       forth_parser.Absyn.Name _name = (forth_parser.Absyn.Name) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_name.forthword_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(forth_parser.Absyn.Constant foo, int _i_)
  {
    if (foo instanceof forth_parser.Absyn.Number)
    {
       forth_parser.Absyn.Number _number = (forth_parser.Absyn.Number) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_number.integer_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(forth_parser.Absyn.ListExpr foo, int _i_)
  {
    ppListExpr(foo.iterator(), _i_);
  }

  private static void ppListExpr(java.util.Iterator<forth_parser.Absyn.Expr> it, int _i_)
  {
    if (it.hasNext())
    {
      forth_parser.Absyn.Expr el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_); render(" ");
      }
      else
      { /* cons */
        pp(el, _i_); render(" "); ppListExpr(it, _i_);
      }
    }
  }



  private static void sh(forth_parser.Absyn.Prg foo)
  {
    if (foo instanceof forth_parser.Absyn.Program)
    {
       forth_parser.Absyn.Program _program = (forth_parser.Absyn.Program) foo;
       render("(");
       render("Program");
       render("[");
       sh(_program.liststatement_);
       render("]");
       render(")");
    }
  }

  private static void sh(forth_parser.Absyn.ListStatement foo)
  {
     for (java.util.Iterator<forth_parser.Absyn.Statement> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(forth_parser.Absyn.Statement foo)
  {
    if (foo instanceof forth_parser.Absyn.Literal)
    {
       forth_parser.Absyn.Literal _literal = (forth_parser.Absyn.Literal) foo;
       render("(");
       render("Literal");
       sh(_literal.constant_);
       render(")");
    }
    if (foo instanceof forth_parser.Absyn.Expression)
    {
       forth_parser.Absyn.Expression _expression = (forth_parser.Absyn.Expression) foo;
       render("(");
       render("Expression");
       sh(_expression.expr_);
       render(")");
    }
    if (foo instanceof forth_parser.Absyn.SinlgeWord)
    {
       forth_parser.Absyn.SinlgeWord _sinlgeword = (forth_parser.Absyn.SinlgeWord) foo;
       render("(");
       render("SinlgeWord");
       sh(_sinlgeword.word_);
       render(")");
    }
  }

  private static void sh(forth_parser.Absyn.Expr foo)
  {
    if (foo instanceof forth_parser.Absyn.Conditional)
    {
       forth_parser.Absyn.Conditional _conditional = (forth_parser.Absyn.Conditional) foo;
       render("(");
       render("Conditional");
       sh(_conditional.statement_);
       render(")");
    }
    if (foo instanceof forth_parser.Absyn.Loop)
    {
       forth_parser.Absyn.Loop _loop = (forth_parser.Absyn.Loop) foo;
       render("(");
       render("Loop");
       sh(_loop.statement_);
       render(")");
    }
    if (foo instanceof forth_parser.Absyn.Define)
    {
       forth_parser.Absyn.Define _define = (forth_parser.Absyn.Define) foo;
       render("(");
       render("Define");
       sh(_define.word_);
       sh(_define.statement_);
       render(")");
    }
  }

  private static void sh(forth_parser.Absyn.Word foo)
  {
    if (foo instanceof forth_parser.Absyn.Name)
    {
       forth_parser.Absyn.Name _name = (forth_parser.Absyn.Name) foo;
       render("(");
       render("Name");
       sh(_name.forthword_);
       render(")");
    }
  }

  private static void sh(forth_parser.Absyn.Constant foo)
  {
    if (foo instanceof forth_parser.Absyn.Number)
    {
       forth_parser.Absyn.Number _number = (forth_parser.Absyn.Number) foo;
       render("(");
       render("Number");
       sh(_number.integer_);
       render(")");
    }
  }

  private static void sh(forth_parser.Absyn.ListExpr foo)
  {
     for (java.util.Iterator<forth_parser.Absyn.Expr> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }


  private static void pp(Integer n, int _i_) { buf_.append(n); buf_.append(" "); }
  private static void pp(Double d, int _i_) { buf_.append(String.format(java.util.Locale.ROOT, "%.15g ", d)); }
  private static void pp(String s, int _i_) { buf_.append(s); buf_.append(" "); }
  private static void pp(Character c, int _i_) { buf_.append("'" + escape(c.toString()) + "'"); buf_.append(" "); }
  private static void sh(Integer n) { render(n.toString()); }
  private static void sh(Double d) { render(String.format(java.util.Locale.ROOT, "%.15g", d)); }
  private static void sh(Character c) { render("'" + escape(c.toString()) + "'"); }
  private static void sh(String s) { printQuoted(s); }

  private static void printQuoted(String s) { render("\"" + escape(s) + "\""); }

  public static String escape(String s) {
    if (s == null) return null;
    return s.replace("\\", "\\\\")
            .replace("\t", "\\t")
            .replace("\b", "\\b")
            .replace("\n", "\\n")
            .replace("\r", "\\r")
            .replace("\f", "\\f")
            .replace("\"", "\\\"");
  }

  private static void indent()
  {
    int n = _n_;
    while (n > 0)
    {
      buf_.append(' ');
      n--;
    }
  }

  private static void backup()
  {
    int prev = buf_.length() - 1;
    if (prev >= 0 && buf_.charAt(prev) == ' ')
      buf_.setLength(prev);
  }

  private static void trim()
  {
    // Trim initial spaces
    int end = 0;
    int len = buf_.length();
    while (end < len && buf_.charAt(end) == ' ')
      end++;
    buf_.delete(0, end);
    // Trim trailing spaces
    removeTrailingSpaces();
  }

  private static void removeTrailingSpaces()
  {
    int end = buf_.length();
    while (end > 0 && buf_.charAt(end-1) == ' ')
      end--;
    buf_.setLength(end);
  }

  private static void removeTrailingWhitespace()
  {
    int end = buf_.length();
    while (end > 0 && (buf_.charAt(end-1) == ' ' || buf_.charAt(end-1) == '\n'))
      end--;
    buf_.setLength(end);
  }

  private static void onEmptyLine()
  {
    removeTrailingSpaces();
    int len = buf_.length();
    if (len > 0 && buf_.charAt(len-1) != '\n') buf_.append("\n");
    indent();
  }

  private static int _n_ = 0;
  private static StringBuilder buf_ = new StringBuilder(INITIAL_BUFFER_SIZE);
}

