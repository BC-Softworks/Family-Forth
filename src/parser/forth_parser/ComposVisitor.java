// File generated by the BNF Converter (bnfc 2.9.5).

package forth_parser;
/** Composition Visitor
*/

public class ComposVisitor<A> implements
  forth_parser.Absyn.Prg.Visitor<forth_parser.Absyn.Prg,A>,
  forth_parser.Absyn.Statement.Visitor<forth_parser.Absyn.Statement,A>,
  forth_parser.Absyn.Expr.Visitor<forth_parser.Absyn.Expr,A>,
  forth_parser.Absyn.Word.Visitor<forth_parser.Absyn.Word,A>,
  forth_parser.Absyn.Constant.Visitor<forth_parser.Absyn.Constant,A>
{
    /* Prg */
    public forth_parser.Absyn.Prg visit(forth_parser.Absyn.Program p, A arg)
    {
      forth_parser.Absyn.ListStatement liststatement_ = new forth_parser.Absyn.ListStatement();
      for (forth_parser.Absyn.Statement x : p.liststatement_)
      {
        liststatement_.add(x.accept(this,arg));
      }
      return new forth_parser.Absyn.Program(liststatement_);
    }

    /* Statement */
    public forth_parser.Absyn.Statement visit(forth_parser.Absyn.Literal p, A arg)
    {
      forth_parser.Absyn.Constant constant_ = p.constant_.accept(this, arg);
      return new forth_parser.Absyn.Literal(constant_);
    }
    public forth_parser.Absyn.Statement visit(forth_parser.Absyn.Expression p, A arg)
    {
      forth_parser.Absyn.Expr expr_ = p.expr_.accept(this, arg);
      return new forth_parser.Absyn.Expression(expr_);
    }
    public forth_parser.Absyn.Statement visit(forth_parser.Absyn.SinlgeWord p, A arg)
    {
      forth_parser.Absyn.Word word_ = p.word_.accept(this, arg);
      return new forth_parser.Absyn.SinlgeWord(word_);
    }

    /* Expr */
    public forth_parser.Absyn.Expr visit(forth_parser.Absyn.Conditional p, A arg)
    {
      forth_parser.Absyn.Statement statement_ = p.statement_.accept(this, arg);
      return new forth_parser.Absyn.Conditional(statement_);
    }
    public forth_parser.Absyn.Expr visit(forth_parser.Absyn.Loop p, A arg)
    {
      forth_parser.Absyn.Statement statement_ = p.statement_.accept(this, arg);
      return new forth_parser.Absyn.Loop(statement_);
    }
    public forth_parser.Absyn.Expr visit(forth_parser.Absyn.Define p, A arg)
    {
      forth_parser.Absyn.Word word_ = p.word_.accept(this, arg);
      forth_parser.Absyn.Statement statement_ = p.statement_.accept(this, arg);
      return new forth_parser.Absyn.Define(word_, statement_);
    }

    /* Word */
    public forth_parser.Absyn.Word visit(forth_parser.Absyn.Name p, A arg)
    {
      String forthword_ = p.forthword_;
      return new forth_parser.Absyn.Name(forthword_);
    }

    /* Constant */
    public forth_parser.Absyn.Constant visit(forth_parser.Absyn.Number p, A arg)
    {
      Integer integer_ = p.integer_;
      return new forth_parser.Absyn.Number(integer_);
    }
}
