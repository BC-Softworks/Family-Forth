// -*- Java -*- File generated by the BNF Converter (bnfc 2.9.5).

// Parser definition for use with Java Cup
package forth_parser;

action code {:
public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}
:}
parser code {:
  public forth_parser.Absyn.Prg pPrg() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (forth_parser.Absyn.Prg) res.value;
  }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal forth_parser.Absyn.Prg Prg;
nonterminal forth_parser.Absyn.ListStatement ListStatement;
nonterminal forth_parser.Absyn.Statement Statement;
nonterminal forth_parser.Absyn.Expr Expr;
nonterminal forth_parser.Absyn.Word Word;
nonterminal forth_parser.Absyn.Constant Constant;
nonterminal forth_parser.Absyn.ListExpr ListExpr;

terminal _SYMB_0;    //   :
terminal _SYMB_1;    //   ;
terminal _SYMB_2;    //   begin
terminal _SYMB_3;    //   if
terminal _SYMB_4;    //   then
terminal _SYMB_5;    //   until



terminal Integer _INTEGER_;



terminal String ForthWord;


start with Prg;


Prg ::= ListStatement:p_1  {: RESULT = new forth_parser.Absyn.Program(p_1); :}
;
ListStatement ::= Statement:p_1  {: RESULT = new forth_parser.Absyn.ListStatement(); RESULT.addLast(p_1); :}
  | Statement:p_1 ListStatement:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;
Statement ::= Constant:p_1  {: RESULT = new forth_parser.Absyn.Literal(p_1); :}
  | Expr:p_1  {: RESULT = new forth_parser.Absyn.Expression(p_1); :}
  | Word:p_1  {: RESULT = new forth_parser.Absyn.SinlgeWord(p_1); :}
;
Expr ::= _SYMB_3:p_1 Statement:p_2 _SYMB_4:p_3  {: RESULT = new forth_parser.Absyn.Conditional(p_2); :}
  | _SYMB_2:p_1 Statement:p_2 _SYMB_5:p_3  {: RESULT = new forth_parser.Absyn.Loop(p_2); :}
  | _SYMB_0:p_1 Word:p_2 Statement:p_3 _SYMB_1:p_4  {: RESULT = new forth_parser.Absyn.Define(p_2,p_3); :}
;
Word ::= ForthWord:p_1  {: RESULT = new forth_parser.Absyn.Name(p_1); :}
;
Constant ::= _INTEGER_:p_1  {: RESULT = new forth_parser.Absyn.Number(p_1); :}
;
ListExpr ::= Expr:p_1  {: RESULT = new forth_parser.Absyn.ListExpr(); RESULT.addLast(p_1); :}
  | Expr:p_1 ListExpr:p_2  {: RESULT = p_2; p_2.addFirst(p_1); :}
;

